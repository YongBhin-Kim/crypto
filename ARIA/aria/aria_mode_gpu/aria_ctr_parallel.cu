#include <stdio.h>
#include <stdint.h>
// #include "../ARIA/aria.cuh"

#define MAX_PT_BYTES 256
#define MAX_BLOCKS (MAX_PT_BYTES/16 + 1)
#define MAX_ROUND 17
#define MAX_KEY_BYTES 32
#define BLOCK_BYTES 16

#define IV_BYTES 16
#define ROUND 12
#define PT_BYTES 83 // 5 blocks + 3 remainder


#define BANK_BYTES 4
#define MAX_BANK 32
#define THREAD_UNIT (MAX_BANK/(BLOCK_BYTES/BANK_BYTES)) // max bank nums / bank nums of one block

// Constant for key expansion
__constant__ uint8_t d_C1[16] = { 0x51, 0x7c, 0xc1, 0xb7, 0x27, 0x22, 0x0a, 0x94, 0xfe, 0x13, 0xab, 0xe8, 0xfa, 0x9a, 0x6e, 0xe0 };
__constant__ uint8_t d_C2[16] = { 0x6d, 0xb1, 0x4a, 0xcc, 0x9e, 0x21, 0xc8, 0x20, 0xff, 0x28, 0xb1, 0xd5, 0xef, 0x5d, 0xe2, 0xb0 };
__constant__ uint8_t d_C3[16] = { 0xdb, 0x92, 0x37, 0x1d, 0x21, 0x26, 0xe9, 0x70, 0x03, 0x24, 0x97, 0x75, 0x04, 0xe8, 0xc9, 0x0e };

uint8_t C1[16] = { 0x51, 0x7c, 0xc1, 0xb7, 0x27, 0x22, 0x0a, 0x94, 0xfe, 0x13, 0xab, 0xe8, 0xfa, 0x9a, 0x6e, 0xe0 };
uint8_t C2[16] = { 0x6d, 0xb1, 0x4a, 0xcc, 0x9e, 0x21, 0xc8, 0x20, 0xff, 0x28, 0xb1, 0xd5, 0xef, 0x5d, 0xe2, 0xb0 };
uint8_t C3[16] = { 0xdb, 0x92, 0x37, 0x1d, 0x21, 0x26, 0xe9, 0x70, 0x03, 0x24, 0x97, 0x75, 0x04, 0xe8, 0xc9, 0x0e };

// S-box 1, 2 and inverse of S-box for sybstlayer
__constant__ uint8_t d_sbox[2][256] = {{
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
},
{ 0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
  0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
  0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
  0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
  0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
  0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
  0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
  0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
  0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
  0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
  0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
  0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
  0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
  0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
  0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
  0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
}};

__constant__ uint8_t d_isbox[2][256] = {{
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
},
{
  0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
  0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
  0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
  0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
  0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
  0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
  0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
  0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
  0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
  0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
  0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
  0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
  0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
  0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
  0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
  0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
}};

// S-box 1, 2 and inverse of S-box for sybstlayer
uint8_t sbox[2][256] = {{
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
},
{ 0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
  0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
  0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
  0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
  0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
  0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
  0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
  0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
  0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
  0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
  0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
  0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
  0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
  0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
  0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
  0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
}};

uint8_t isbox[2][256] = {{
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
},
{
  0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
  0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
  0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
  0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
  0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
  0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
  0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
  0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
  0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
  0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
  0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
  0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
  0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
  0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
  0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
  0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
}};


// Print array
__host__ __device__ void printarray( char *msg, uint8_t *array, int bytelen ) {

    printf(" %s ", msg);
    for ( int i=0; i<bytelen; i++ ) {
        printf("%02x ", array[i]);
    }
    printf("\n");
}

// Diffusion Layer function
__host__ __device__ void difflayer( uint8_t res[BLOCK_BYTES], uint8_t state[BLOCK_BYTES] ) {

    uint8_t temp[BLOCK_BYTES];

    memcpy(temp, state, 16);

    res[0]=temp[3]^temp[4]^temp[6]^temp[8]^temp[9]^temp[13]^temp[14];
    res[1]=temp[2]^temp[5]^temp[7]^temp[8]^temp[9]^temp[12]^temp[15];
    res[2]=temp[1]^temp[4]^temp[6]^temp[10]^temp[11]^temp[12]^temp[15];
    res[3]=temp[0]^temp[5]^temp[7]^temp[10]^temp[11]^temp[13]^temp[14];

    res[4]=temp[0]^temp[2]^temp[5]^temp[8]^temp[11]^temp[14]^temp[15];
    res[5]=temp[1]^temp[3]^temp[4]^temp[9]^temp[10]^temp[14]^temp[15];
    res[6]=temp[0]^temp[2]^temp[7]^temp[9]^temp[10]^temp[12]^temp[13];
    res[7]=temp[1]^temp[3]^temp[6]^temp[8]^temp[11]^temp[12]^temp[13];

    res[8]=temp[0]^temp[1]^temp[4]^temp[7]^temp[10]^temp[13]^temp[15];
    res[9]=temp[0]^temp[1]^temp[5]^temp[6]^temp[11]^temp[12]^temp[14];
    res[10]=temp[2]^temp[3]^temp[5]^temp[6]^temp[8]^temp[13]^temp[15];
    res[11]=temp[2]^temp[3]^temp[4]^temp[7]^temp[9]^temp[12]^temp[14];
	
    res[12]=temp[1]^temp[2]^temp[6]^temp[7]^temp[9]^temp[11]^temp[12];
    res[13]=temp[0]^temp[3]^temp[6]^temp[7]^temp[8]^temp[10]^temp[13];
    res[14]=temp[0]^temp[3]^temp[4]^temp[5]^temp[9]^temp[11]^temp[14];
    res[15]=temp[1]^temp[2]^temp[4]^temp[5]^temp[8]^temp[10]^temp[15];
}

// Off round F function
__host__ __device__ void fo( uint8_t state[16], uint8_t key[16] ) {
    
    // Addroundkey
    for ( int i=0; i<16; i++ )
        state[i] ^= key[i];

    // Substlayer type1 ( LT||LT||LT||LT )
#ifdef __CUDA_ARCH__
    for (int i=0; i<4; i++) {
        state[4*i]   = d_sbox[0][state[4*i]];
        state[4*i+1] = d_sbox[1][state[4*i+1]];
        state[4*i+2] = d_isbox[0][state[4*i+2]];
        state[4*i+3] = d_isbox[1][state[4*i+3]];
    }
#else
    for (int i=0; i<4; i++) {
        state[4*i]   = sbox[0][state[4*i]];
        state[4*i+1] = sbox[1][state[4*i+1]];
        state[4*i+2] = isbox[0][state[4*i+2]];
        state[4*i+3] = isbox[1][state[4*i+3]];
    }
#endif

    // Difflayer
    difflayer(state, state);
}

// Even round F function
__host__ __device__ void fe( uint8_t state[16], uint8_t key[16] ) {

    // Addroundkey
    for (int i=0; i<16; i++)
        state[i] ^= key[i];
    
    // Substlayer type2 ( invLT||invLT||invLT||invLT )
#ifdef __CUDA_ARCH__
    for (int i=0; i<4; i++) {
        state[4*i]   = d_isbox[0][state[4*i]];
        state[4*i+1] = d_isbox[1][state[4*i+1]];
        state[4*i+2] = d_sbox[0][state[4*i+2]];
        state[4*i+3] = d_sbox[1][state[4*i+3]];
    }
#else
    for (int i=0; i<4; i++) {
        state[4*i]   = isbox[0][state[4*i]];
        state[4*i+1] = isbox[1][state[4*i+1]];
        state[4*i+2] = sbox[0][state[4*i+2]];
        state[4*i+3] = sbox[1][state[4*i+3]];
    }
#endif

    // Difflayer
    difflayer(state, state);
}

// Final round F function
__host__ __device__ void ff( uint8_t state[16], uint8_t key[16], uint8_t whiteningkey[16] ) {

    // AddRoundKey
    for (int i=0; i<16; i++)
        state[i] ^= key[i];
    
    // SubstLayer type2 (invLT||invLT||invLT||invLT)
#ifdef __CUDA_ARCH__
    for (int i=0; i<4; i++) {
        state[4*i]   = d_isbox[0][state[4*i]];
        state[4*i+1] = d_isbox[1][state[4*i+1]];
        state[4*i+2] = d_sbox[0][state[4*i+2]];
        state[4*i+3] = d_sbox[1][state[4*i+3]];
    }
#else
    for (int i=0; i<4; i++) {
        state[4*i]   = isbox[0][state[4*i]];
        state[4*i+1] = isbox[1][state[4*i+1]];
        state[4*i+2] = sbox[0][state[4*i+2]];
        state[4*i+3] = sbox[1][state[4*i+3]];
    }
#endif

    // AddRoundKey with whitening key
    for ( int i=0; i<16; i++ ) 
        state[i] ^= whiteningkey[i];
}

// Bits rotation function for keyexpansion
__host__ __device__ void rot( uint8_t res[16], uint8_t state[16], int bits ) {

    int q = bits / 8;
    int r = bits % 8;
    for (int i=0; i<BLOCK_BYTES; i++) {
        res[(q+i) % BLOCK_BYTES] ^= state[i] >> r;
        if ( r != 0 )
            res[(q+i+1) % BLOCK_BYTES] ^= (state[i] << (8-r) & 0xfe);
    }
}

// Key expansion function for generate round key or whitening key
__host__ __device__ void keyexpansion( uint8_t *enc_w, uint8_t *dec_w, uint8_t *mk, int round ) {
    
    /* Key expansion initial part (ARIA128/ ARIA192/ ARIA256) */ 
    // Feistal 암호의 입력인 KL, KR은 mk||0..0 으로 적절히 만들것
    // (MK로부터 W0 W1 W2 만들기)
    uint8_t W0[16], W1[16], W2[16], W3[16];             // output of feistal crypto 
    uint8_t KL[16], KR[16], CK1[16], CK2[16], CK3[16];  // input of feistal crypto 

    memset(&W0, 0, sizeof(W0)); memset(&W1, 0, sizeof(W1)); memset(&W2, 0, sizeof(W2)); memset(&W3, 0, sizeof(W3));
    memset(&KL, 0, sizeof(KL)); memset(&KR, 0, sizeof(KR)); memset(&CK1, 0, sizeof(CK1)); memset(&CK2, 0, sizeof(CK2)); memset(&CK3, 0, sizeof(CK3));

    // KL <- mk[0~15] for all case of ARIA-128/192/256
    for (int i=0; i<16; i++) 
        KL[i] = mk[i]; // Allocations KL which is msb-16-bytes of master key

    // printf("[kernal] key expansion\n");
    // KR <- mk||0..0 case ARIA-128/192/256
    if ( round == 12 ) {
#ifdef __CUDA_ARCH__
        for (int i=0; i<16; i++) { // select CK1, CK2, CK3
            CK1[i] = d_C1[i];
            CK2[i] = d_C2[i];
            CK3[i] = d_C3[i];
        }
#else
        for (int i=0; i<16; i++) { // select CK1, CK2, CK3
            CK1[i] = C1[i];
            CK2[i] = C2[i];
            CK3[i] = C3[i];
        }
#endif
    }
    else if ( round == 14 ) {      // KR <- mk[16~23] || 0[24~31] 
        for (int i=0; i<8; i++)
            KR[i] = mk[16+i]; 
        // zero value is already initialized
#ifdef __CUDA_ARCH__
        for (int i=0; i<16; i++) {
            CK1[i] = d_C2[i];
            CK2[i] = d_C3[i];
            CK3[i] = d_C1[i];
        }
#else
        for (int i=0; i<16; i++) {
            CK1[i] = C2[i];
            CK2[i] = C3[i];
            CK3[i] = C1[i];
        }
#endif
    }
    else if ( round == 16 ) {      // KR <- mk[16~31]
        for (int i=0; i<16; i++)
            KR[i] = mk[16+i];
#ifdef __CUDA_ARCH__
        for (int i=0; i<16; i++) {
            CK1[i] = d_C3[i];
            CK2[i] = d_C1[i];
            CK3[i] = d_C2[i];
        }
#else
        for (int i=0; i<16; i++) {
            CK1[i] = C3[i];
            CK2[i] = C1[i];
            CK3[i] = C2[i];
        }
#endif
    }
    else
        return;

    // W0 <- KL
    for (int i=0; i<16; i++)
        W0[i] = KL[i];
    // W1 <- fo(W0, CK1) ^ KR
    // uint8_t temp0[16];
    uint8_t temp0[16];
    // cudaMalloc ( (void **)&temp0, 16 * sizeof(uint8_t) );
    memset(&temp0, 0, sizeof(temp0));
    for (int i=0; i<16; i++)
        temp0[i] = W0[i];
    
    fo(temp0, CK1);
    for (int i=0; i<16; i++)
        W1[i] = temp0[i] ^ KR[i];
    // W2 <- fe(W1, CK2) ^ W0
    memset(&temp0, 0, sizeof(temp0));
    for (int i=0; i<16; i++)
        temp0[i] = W1[i];
    fe(temp0, CK2);
    for (int i=0; i<16; i++)
        W2[i] = temp0[i] ^ W0[i];
    // W3 <- fo(W2, CK3) ^ W1
    memset(temp0, 0, sizeof(temp0));
    for (int i=0; i<16; i++)
        temp0[i] = W2[i];
    fo(temp0, CK3);
    for (int i=0; i<16; i++)
        W3[i] = temp0[i] ^ W1[i];

    /* Round key generation part (ARIA-128/192/256 : 12/14/16 round, 16 bytes) */
    uint8_t rotW0[16], rotW1[16], rotW2[16], rotW3[16];
    memset(&rotW0, 0, sizeof(rotW0)); memset(&rotW1, 0, sizeof(rotW1)); memset(&rotW2, 0, sizeof(rotW2)); memset(&rotW3, 0, sizeof(rotW3));

    // Generate encrypt round key
    rot( rotW0, W0, 19 ); rot( rotW1, W1, 19 ); rot( rotW2, W2, 19 ); rot( rotW3, W3, 19 ); // rotation >>>19 W0,W1,W2,W3
    for (int i=0; i<BLOCK_BYTES; i++) {
        enc_w[BLOCK_BYTES * 0 + i] = W0[i] ^ rotW1[i];      // ek1 <- W0 ^ (W1 >>> 19)
        enc_w[BLOCK_BYTES * 1 + i] = W1[i] ^ rotW2[i];      // ek2 <- W1 ^ (W2 >>> 19)
        enc_w[BLOCK_BYTES * 2 + i] = W2[i] ^ rotW3[i];      // ek3 <- W2 ^ (W3 >>> 19)
        enc_w[BLOCK_BYTES * 3 + i] = W3[i] ^ rotW0[i];      // ek4 <- (W0 >>> 19) ^ W3
    }
    memset(&rotW0, 0, sizeof(rotW0)); memset(&rotW1, 0, sizeof(rotW1)); memset(&rotW2, 0, sizeof(rotW2)); memset(&rotW3, 0, sizeof(rotW3));
    rot( rotW0, W0, 31 ); rot( rotW1, W1, 31 ); rot( rotW2, W2, 31 ); rot( rotW3, W3, 31 ); // rotation >>>31 W0,W1,W2,W3
    for (int i=0; i<BLOCK_BYTES; i++) {
        enc_w[BLOCK_BYTES * 4 + i] = W0[i] ^ rotW1[i];      // ek5 <- W0 ^ (W1>>>31) 
        enc_w[BLOCK_BYTES * 5 + i] = W1[i] ^ rotW2[i];      // ek6 <- W1 ^ (W2>>>31)
        enc_w[BLOCK_BYTES * 6 + i] = W2[i] ^ rotW3[i];      // ek7 <- W2 ^ (W3>>>31)
        enc_w[BLOCK_BYTES * 7 + i] = W3[i] ^ rotW0[i];      // ek8 <- (W0>>>31) ^ W3
    }

    memset(&rotW0, 0, sizeof(rotW0)); memset(&rotW1, 0, sizeof(rotW1)); memset(&rotW2, 0, sizeof(rotW2)); memset(&rotW3, 0, sizeof(rotW3));
    
    rot( rotW0, W0, 67 ); rot( rotW1, W1, 67 ); rot( rotW2, W2, 67 ); rot( rotW3, W3, 67 ); // rotation <<<61 W0,W1,W2,W3
    for (int i=0; i<BLOCK_BYTES; i++) {
        enc_w[BLOCK_BYTES * 8 + i] = W0[i] ^ rotW1[i];      // ek9  <- W0 ^ (W1<<<61) 
        enc_w[BLOCK_BYTES * 9 + i] = W1[i] ^ rotW2[i];      // ek10 <- W1 ^ (W2<<<61)
        enc_w[BLOCK_BYTES * 10 + i] = W2[i] ^ rotW3[i];     // ek11 <- W2 ^ (W3<<<61)
        enc_w[BLOCK_BYTES * 11 + i] = W3[i] ^ rotW0[i];     // ek12 <- (W0<<<61) ^ W3
    }

    // Generate encrypt round key or whitening key for ARIA128/192/256
    memset(&rotW0, 0, sizeof(rotW0)); memset(&rotW1, 0, sizeof(rotW1)); memset(&rotW2, 0, sizeof(rotW2)); memset(&rotW3, 0, sizeof(rotW3));
    rot( rotW1, W1, 97 );
    for (int i=0; i<BLOCK_BYTES; i++)
        enc_w[BLOCK_BYTES * 12 + i] = W0[i] ^ rotW1[i];     // ek13 <- W0 ^ (W1<<<31) (ARIA-128 whiteningkey)
    if ( (round == 14) || (round == 16) ) {
        rot( rotW2, W2, 97 );
        rot( rotW3, W3, 97 );
        for (int i=0; i<BLOCK_BYTES; i++) {
            enc_w[BLOCK_BYTES * 13 + i] = W1[i] ^ rotW2[i]; // ek14 <- W1 ^ (W2<<<31)
            enc_w[BLOCK_BYTES * 14 + i] = W2[i] ^ rotW3[i]; // ek15 <- W2 ^ (W3<<<31) (ARIA-192 whiteningkey)
        }
    }
    if ( round == 16 ) {
        memset(&rotW1, 0, sizeof(rotW1));
        rot( rotW0, W0, 97 );
        rot( rotW1, W1, 109 );
        for (int i=0; i<BLOCK_BYTES; i++) {
            enc_w[BLOCK_BYTES * 15 + i] = W3[i] ^ rotW0[i]; // ek16 <- (W0<<<31) ^ W3
            enc_w[BLOCK_BYTES * 16 + i] = W0[i] ^ rotW1[i]; // ek17 <- W0 ^ (W1<<<19) (ARIA-256 whiteningkey)
        }
    }

    //  Generate decrypt round key (Parallel for dec_w[0, 1, 2, ...])
    for (int i=0; i<BLOCK_BYTES; i++) {
        dec_w[BLOCK_BYTES * 0 + i] = enc_w[BLOCK_BYTES * round + i];       // dec_w[0] <- enc_w[round]
        dec_w[BLOCK_BYTES * round + i] = enc_w[BLOCK_BYTES * 0 + i];       // dec_w[round] <- enc_w[0];
    }
    for (int r=1; r<=round-1; r++) {
        difflayer(dec_w + (BLOCK_BYTES * r), enc_w + (BLOCK_BYTES * (round-r))); // dec_w[r] <- A(enc_w[round-r]) for r 1 to round-1
    }


}

// ARIA-128/192/256 Encrypt function
__host__ __device__ void aria_enc( uint8_t ct[BLOCK_BYTES], uint8_t pt[BLOCK_BYTES], uint8_t w[MAX_ROUND * BLOCK_BYTES], int round ) {

    uint8_t state[BLOCK_BYTES] = { 0x00, };

    memcpy(state, pt, BLOCK_BYTES);

    // 1 ~ 11/13/15 round (ARIA-128/192/256)
    for (int r=1; r<round; r++) {
        if ( (r%2) == 1 )
            fo(state, w + (BLOCK_BYTES * (r-1)));
        else
            fe(state, w + (BLOCK_BYTES * (r-1)));
    }
    // Final round : 12/14/16 (ARIA-128/192/256)
    ff(state, w + BLOCK_BYTES * (round-1), w + (BLOCK_BYTES * round));

    // deep copy
    for (int i=0; i<BLOCK_BYTES; i++)
        ct[i] = state[i];
}

// ARIA-128/192/256 Decrypt function
__global__ void aria_dec( uint8_t recovered[BLOCK_BYTES], uint8_t ct[BLOCK_BYTES], uint8_t w[MAX_ROUND * BLOCK_BYTES], int round ) {

    uint8_t state[BLOCK_BYTES] = { 0x00, };

    memcpy(state, ct, BLOCK_BYTES);
    
    // 1 ~ 11/13/15 round (ARIA-128/192/256)
    for (int r=1; r<round; r++) {
        if ( (r%2) == 1 )
            fo(state, w + (BLOCK_BYTES * (r-1))); // fo(state, w[r-1]);
        else 
            fe(state, w + (BLOCK_BYTES * (r-1))); // fe(state, w[r-1]);
    }

    // Final round : 12/14/16 (ARIA-128/192/256)
    ff(state, w + (BLOCK_BYTES * (round-1)), w + (BLOCK_BYTES * round)); // ff(state, w[round-1], w[round]);

    // deep copy
    for (int i=0; i<BLOCK_BYTES; i++)
        recovered[i] = state[i];
}




// Function inc_32 
__host__ __device__ void counter_inc ( uint8_t counter[BLOCK_BYTES] ) {
    for ( int i=BLOCK_BYTES-1; i>=0; i-- ) {
        if ( counter[i] != 0xff ) {
            counter[i]++;
            break;
        }
        else
            counter[i] = 0x00;
    }
}

// global function : dest , src, src, src, ...
__global__ void aria_ctr_parallel ( uint8_t *ct, uint8_t *pt, uint8_t *enc_w, uint8_t *ctr, int *block_num, int *round ) {

    
    int tid = threadIdx.x + blockIdx.x * blockDim.x;

    __shared__ uint8_t ctr_ct[MAX_BLOCKS*BLOCK_BYTES]; // shared in same blocks (4)
    uint8_t ctr_ct_temp[BLOCK_BYTES];

    if ( tid < block_num[0] ) {

        printf(" [GPU kernel - global function tid (%d) launched]\n", tid);

        aria_enc( ctr_ct_temp, ctr + (BLOCK_BYTES * tid), enc_w, round[0] );
        memcpy(ctr_ct + (BLOCK_BYTES * tid), ctr_ct_temp, BLOCK_BYTES);
        __syncthreads(); // 

        for ( int i=0; i<BLOCK_BYTES; i++ )
            (ct + (BLOCK_BYTES * tid))[i] = (pt + (BLOCK_BYTES * tid))[i] ^ (ctr_ct + (BLOCK_BYTES * tid))[i]; // 'ct' is pointer of result 
    }


}

// main function
int main( void ) {

    uint8_t pt[MAX_PT_BYTES] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22 };
    uint8_t mk[MAX_KEY_BYTES] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; 
    uint8_t iv[IV_BYTES] = { 0x80, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // iv
    uint8_t ct[MAX_PT_BYTES] = { 0x00, };
    uint8_t ctr[MAX_BLOCKS*BLOCK_BYTES] = { 0x00, };
    uint8_t recovered[MAX_PT_BYTES] = { 0x00, };
    uint8_t *d_ct, *d_pt, *d_recovered, *d_ctr, *d_enc_ww;
    int *d_block_num, *d_round, round[1], block_num[1];
    round[0] = ROUND; // num of round
    uint8_t enc_ww[MAX_ROUND * BLOCK_BYTES], dec_ww[MAX_ROUND * BLOCK_BYTES];
    memset( &enc_ww, 0, sizeof(enc_ww) ); memset( &dec_ww, 0, sizeof(dec_ww) ); memset( &ct, 0, sizeof(ct) ); memset( &recovered, 0, sizeof(recovered) ); memcpy(ctr, iv, IV_BYTES);

    // Key expansion within host
    keyexpansion( enc_ww, dec_ww, mk, round[0] ); 

    // Fill cpu array
    
    block_num[0] = PT_BYTES / BLOCK_BYTES + 1; // num of blocks + 1
    // int remainder = PT_BYTES - 16*(block_num[0]);
    int ctr_block_bytes = 16*(block_num[0]+1);
    // printf("block_num = %d\n", block_num[0]); // 3.17 seminar

    // Compute ctr blocks
    memcpy(ctr, iv, BLOCK_BYTES);
    for ( int i=1; i<block_num[0]; i++ ) {
        memcpy(ctr + (BLOCK_BYTES * i), ctr + (BLOCK_BYTES * (i-1)), BLOCK_BYTES);
        counter_inc(ctr + (BLOCK_BYTES * i));
    }


    // Allocate GPU memory
    cudaMalloc( (void**)&d_pt,          ctr_block_bytes * sizeof(uint8_t) ); // pt
    cudaMalloc( (void**)&d_recovered,   ctr_block_bytes * sizeof(uint8_t) ); // decrypted text
    cudaMalloc( (void**)&d_ct,          ctr_block_bytes * sizeof(uint8_t) ); // ct
    cudaMalloc( (void**)&d_ctr,         IV_BYTES * (block_num[0]) * sizeof(uint8_t) ); // iv
    cudaMalloc( (void**)&d_enc_ww,      MAX_ROUND * BLOCK_BYTES   * sizeof(uint8_t) ); // key
    cudaMalloc( (void**)&d_block_num,   sizeof(int) ); // num of blocks
    cudaMalloc( (void**)&d_round,       sizeof(int) ); // num of round
    // printarray("key = ", enc_ww, 13 * 16); // 3.17 seminar
 
    // Copy array to GPU
    cudaMemcpy( d_pt,
                pt, 
                PT_BYTES * sizeof(uint8_t), 
                cudaMemcpyHostToDevice ); // pt
    cudaMemcpy( d_ctr, 
                ctr, 
                IV_BYTES * (block_num[0]) * sizeof(uint8_t), 
                cudaMemcpyHostToDevice ); // iv
    cudaMemcpy( d_block_num, 
                block_num, 
                sizeof(int), 
                cudaMemcpyHostToDevice ); // num of blocks
    cudaMemcpy( d_round, 
                round, 
                sizeof(int), 
                cudaMemcpyHostToDevice ); // num of round
    cudaMemcpy( d_enc_ww, 
                enc_ww, 
                (round[0]+1) * BLOCK_BYTES * sizeof(uint8_t), 
                cudaMemcpyHostToDevice ); // encryption key

    // global function<<<blocks, threads>>> (params);
    // Encryption part
    
    int blocks = block_num[0]/THREAD_UNIT+1;
    int threads = THREAD_UNIT;
    aria_ctr_parallel<<<blocks, threads>>>( d_ct, d_pt, d_enc_ww, d_ctr, d_block_num, d_round );
    cudaDeviceSynchronize();
    cudaMemcpy( ct,
                d_ct, 
                ctr_block_bytes * sizeof(uint8_t), 
                cudaMemcpyDeviceToHost );


    // Decryption part
    aria_ctr_parallel<<<blocks, threads>>>( d_recovered, d_ct, d_enc_ww, d_ctr, d_block_num, d_round );
    cudaDeviceSynchronize();
    cudaMemcpy( recovered,
                d_recovered, 
                PT_BYTES, 
                cudaMemcpyDeviceToHost );
    
    // Print result 
    printarray(" plaintext  = ", pt, PT_BYTES); printf("\n");
    printarray(" ciphertext = ", ct, PT_BYTES); printf("\n");
    printarray(" recovered  = ", recovered, PT_BYTES); printf("\n");

    // Free allocated GPU memory
    cudaFree( d_pt        ); // pt
    cudaFree( d_recovered ); // decrypted text
    cudaFree( d_ct        ); // ct
    cudaFree( d_ctr       ); // iv
    cudaFree( d_enc_ww    ); // key
    cudaFree( d_block_num ); // num of blocks
    cudaFree( d_round     ); // num of round
    cudaFree( d_enc_ww );
    

    return 0;
}