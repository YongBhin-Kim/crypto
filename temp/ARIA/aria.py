'''
    ARIA - Python Implementation
'''

C1 = [0x51, 0x7c, 0xc1, 0xb7, 0x27, 0x22, 0x0a, 0x94, 0xfe, 0x13, 0xab, 0xe8, 0xfa, 0x9a, 0x6e, 0xe0]
C2 = [0x6d, 0xb1, 0x4a, 0xcc, 0x9e, 0x21, 0xc8, 0x20, 0xff, 0x28, 0xb1, 0xd5, 0xef, 0x5d, 0xe2, 0xb0]
C3 = [0xdb, 0x92, 0x37, 0x1d, 0x21, 0x26, 0xe9, 0x70, 0x03, 0x24, 0x97, 0x75, 0x04, 0xe8, 0xc9, 0x0e]

sbox = [[
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
],
[ 0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
  0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
  0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
  0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
  0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
  0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
  0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
  0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
  0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
  0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
  0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
  0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
  0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
  0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
  0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
  0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
]]


isbox = [[
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
],
[
  0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
  0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
  0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
  0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
  0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
  0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
  0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
  0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
  0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
  0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
  0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
  0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
  0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
  0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
  0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
  0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
]]


def difflayer(state):
    temp = [0]*16
    for i in range(16):
        temp[i] = state[i]
        
    state[0]=temp[3]^temp[4]^temp[6]^temp[8]^temp[9]^temp[13]^temp[14]
    state[1]=temp[2]^temp[5]^temp[7]^temp[8]^temp[9]^temp[12]^temp[15]
    state[2]=temp[1]^temp[4]^temp[6]^temp[10]^temp[11]^temp[12]^temp[15]
    state[3]=temp[0]^temp[5]^temp[7]^temp[10]^temp[11]^temp[13]^temp[14]

    state[4]=temp[0]^temp[2]^temp[5]^temp[8]^temp[11]^temp[14]^temp[15]
    state[5]=temp[1]^temp[3]^temp[4]^temp[9]^temp[10]^temp[14]^temp[15]
    state[6]=temp[0]^temp[2]^temp[7]^temp[9]^temp[10]^temp[12]^temp[13]
    state[7]=temp[1]^temp[3]^temp[6]^temp[8]^temp[11]^temp[12]^temp[13]

    state[8]=temp[0]^temp[1]^temp[4]^temp[7]^temp[10]^temp[13]^temp[15]
    state[9]=temp[0]^temp[1]^temp[5]^temp[6]^temp[11]^temp[12]^temp[14]
    state[10]=temp[2]^temp[3]^temp[5]^temp[6]^temp[8]^temp[13]^temp[15]
    state[11]=temp[2]^temp[3]^temp[4]^temp[7]^temp[9]^temp[12]^temp[14]
	
    state[12]=temp[1]^temp[2]^temp[6]^temp[7]^temp[9]^temp[11]^temp[12]
    state[13]=temp[0]^temp[3]^temp[6]^temp[7]^temp[8]^temp[10]^temp[13]
    state[14]=temp[0]^temp[3]^temp[4]^temp[5]^temp[9]^temp[11]^temp[14]
    state[15]=temp[1]^temp[2]^temp[4]^temp[5]^temp[8]^temp[10]^temp[15]
        

def fo(state, key):

    # AddRoundKey
    for i in range(16):
        state[i] = state[i] ^ key[i]
    
    # SubstLayer type 1 (LT||LT||LT||LT)
    for i in range(4):
        state[4*i]   = sbox[0][state[4*i]]      # s1
        state[4*i+1] = sbox[1][state[4*i]+1]    # s2
        state[4*i+2] = isbox[0][state[4*i]+2]   # inv s1
        state[4*i+3] = isbox[1][state[4*i]+3]   # inv s2

    # DiffLayer
    difflayer(state)
    
    
# state[16], key[16]
def fe(state, key):
    
    # AddRoundKey
    for i in range(16):
        state[i] = state[i] ^ key[i]
    
    # SubstLayer type 2 (invLT||invLT||invLT||invLT)
    for i in range(4):
        state[4*i]   = isbox[0][state[4*i]]     # inv s1
        state[4*i+1] = isbox[1][state[4*i]+1]   # inv s2
        state[4*i+2] = sbox[0][state[4*i]+2]    # s1
        state[4*i+3] = sbox[1][state[4*i]+1]    # s2

    # DiffLayer
    difflayer(state)
    
def rrot(w, n):
    return w[n:] + w[:n]
    
def lrot(w, n):
    return w[-n:] + w[:-n]


# state[16], key[16*2]
def ff(state, key):
    
    # AddRoundKey
    for i in range(16):
        state[i] = state[i] ^ key[i]
    
    # SubstLayer type 2 (invLT||invLT||invLT||invLT)
    for i in range(4):
        state[4*i]   = isbox[0][state[4*i]]     # inv s1
        state[4*i+1] = isbox[1][state[4*i]+1]   # inv s2
        state[4*i+2] = sbox[0][state[4*i]+2]    # s1
        state[4*i+3] = sbox[1][state[4*i]+1]    # s2
        
    # AddRoundKey (Whitening key)
    for i in range(16):
        state[i] = state[i] ^ key[16+i]

# mk[16], w[13][16]
def keyexpansion(mk, w):
    
    KL = [0]*16
    KR = [0]*16
    W0 = [0]*16
    W1 = [0]*16
    W2 = [0]*16
    W3 = [0]*16
    temp0 = [0]*16
    temp1 = [0]*16
    temp2 = [0]*16
    
    for i in range(16):
        KL[i] = mk[i]
        KR[i] = 0
    
    # W0        
    for i in range(16): 
        W0[i] = KL[i]
    
    # W1
    for i in range(16):
        temp0[i] = W0[i]
    fo(temp0, C1)
    for i in range(16):
        W1[i] = temp0[i] ^ KR[i]
    
    # W2
    for i in range(16):
        temp1[i] = W1[i]
    fe(temp1, C2)
    for i in range(16):
        W2[i] = temp1[i] ^ W0[i]
    
    # W3 = Fo(W2, CK3) ⊕ W1.
    for i in range(16):
        temp2[i] = W2[i]
    fo(temp2, C3)
    for i in range(16):
        W3[i] = temp2[i] ^ W1[i]
        
    # round key generation part (13 round, 16 bytes)
    # for i in range(13*16):
    for i in range(16):
        w[0][i] = W0[i] ^ rrot(W1, 19)[i] # ROT19(W1)
        w[1][i] = W1[i] ^ rrot(W2, 19)[i]
        w[2][i] = W2[i] ^ rrot(W3, 19)[i]
        w[3][i] = rrot(W0, 19)[i] ^ W3[i]
        
        w[4][i] = W0[i] ^ rrot(W1, 31)[i]
        w[5][i] = W1[i] ^ rrot(W2, 31)[i]
        w[6][i] = W2[i] ^ rrot(W3, 31)[i]
        w[7][i] = rrot(W0, 31)[i] ^ W3[i]
        
        w[8][i] = W0[i] ^ rrot(W1, 61)[i]
        w[9][i] = W1[i] ^ rrot(W2, 61)[i]
        w[10][i] = W2[i] ^ rrot(W3, 61)[i]
        w[11][i] = rrot(W0, 61)[i] ^ W3[i]
        
        w[12][i] = W0[i] ^ lrot(W1, 31)[i]
        
'''
    ek1, ek2, ek3, ek4, ek5, ek6, ek7, ek8, ek9, ek10, ek11, ek12, ek13 = [0]*16
    for i in range(16):
        ek1[i] = W0[i] ^ rrot(W1, 19)[i] # ROT19(W1)
        ek2[i] = W1[i] ^ rrot(W2, 19)[i]
        ek3[i] = W2[i] ^ rrot(W3, 19)[i]
        ek4[i] = rrot(W0, 19)[i] ^ W3[i]
        
        ek5[i] = W0[i] ^ rrot(W1, 31)[i]
        ek6[i] = W1[i] ^ rrot(W2, 31)[i]
        ek7[i] = W2[i] ^ rrot(W3, 31)[i]
        ek8[i] = rrot(W0, 31)[i] ^ W3[i]
        
        ek9[i] = W0[i] ^ rrot(W1, 61)[i]
        ek10[i] = W1[i] ^ rrot(W2, 61)[i]
        ek11[i] = W2[i] ^ rrot(W3, 61)[i]
        ek12[i] = rrot(W0, 61)[i] ^ W3[i]
        
        ek13[i] = W0[i] ^ lrot(W1, 31)[i]
'''

def aria_enc(input, output, w): # w[16 * (12+1)]
    
    # state = input
    state = [0]*16
    for i in range(16):
        state[i] = input[i]
    
    # AddRoundKey
    for i in range(16):
        state[i] = state[i] ^ w[i]
        
    # 1~11 Round
    for i in range(1, 12):
        fo(state, w[16*i])
        fe(state, w[16*(i+1)])
    
    # 12 Round
    ff(state, w[16*11])
    
def main():
    pt = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
    ct = [0]*16
    mk = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    w  = [0]*(13*16)
    
    # aria_enc()